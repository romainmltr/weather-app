{"ast":null,"code":"import WeatherService from '../services/weatherService.js';\nimport SearchBar from './SearchBar.vue';\nexport default {\n  components: {\n    SearchBar\n  },\n  data() {\n    return {\n      weatherData: null\n    };\n  },\n  mounted() {\n    this.getWeatherByCity();\n  },\n  methods: {\n    async getWeatherByCity() {\n      try {\n        const response = await WeatherService.getWeatherByCity(this.city);\n        this.weatherData = response.data;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    getWeatherIconUrl(code) {\n      return require(`@/assets/weather-icons/${code}.png`);\n    },\n    handleSearch(city) {\n      this.$emit('city-selected', city); // Émet l'événement 'city-selected' avec la valeur de la ville sélectionnée\n      this.getWeatherByCity();\n    }\n  }\n};","map":{"version":3,"names":["WeatherService","SearchBar","components","data","weatherData","mounted","getWeatherByCity","methods","response","city","error","console","getWeatherIconUrl","code","require","handleSearch","$emit"],"sources":["/Users/romain/Documents/Perso/Dev/weather-app/src/components/HeroHome.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Welcome to My Weather App</h1>\n    <SearchBar @search=\"handleSearch\"></SearchBar>\n    <div v-if=\"weatherData\">\n      <h2>{{ weatherData.location.name }}</h2>\n      <p>Temperature: {{ weatherData.current.temp_c }}°C</p>\n      <p>Humidity: {{ weatherData.current.humidity }}%</p>\n      <img :src=\"getWeatherIconUrl(weatherData.current.condition.code)\" alt=\"Weather Icon\">\n    </div>\n    <div v-else>\n      <p>Loading...</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport WeatherService from '../services/weatherService.js';\nimport SearchBar from './SearchBar.vue';\n\nexport default {\n  components: {\n    SearchBar\n  },\n  data() {\n    return {\n      weatherData: null\n    };\n  },\n  mounted() {\n    this.getWeatherByCity();\n  },\n  methods: {\n    async getWeatherByCity() {\n      try {\n        const response = await WeatherService.getWeatherByCity(this.city);\n        this.weatherData = response.data;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    getWeatherIconUrl(code) {\n      return require(`@/assets/weather-icons/${code}.png`);\n    },\n    handleSearch(city) {\n      this.$emit('city-selected', city); // Émet l'événement 'city-selected' avec la valeur de la ville sélectionnée\n      this.getWeatherByCity();\n    }\n  }\n};\n</script>\n"],"mappings":"AAiBA,OAAOA,cAAa,MAAO,+BAA+B;AAC1D,OAAOC,SAAQ,MAAO,iBAAiB;AAEvC,eAAe;EACbC,UAAU,EAAE;IACVD;EACF,CAAC;EACDE,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,WAAW,EAAE;IACf,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,gBAAgB,CAAC,CAAC;EACzB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,gBAAgBA,CAAA,EAAG;MACvB,IAAI;QACF,MAAME,QAAO,GAAI,MAAMR,cAAc,CAACM,gBAAgB,CAAC,IAAI,CAACG,IAAI,CAAC;QACjE,IAAI,CAACL,WAAU,GAAII,QAAQ,CAACL,IAAI;MAClC,EAAE,OAAOO,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IACDE,iBAAiBA,CAACC,IAAI,EAAE;MACtB,OAAOC,OAAO,CAAE,0BAAyBD,IAAK,MAAK,CAAC;IACtD,CAAC;IACDE,YAAYA,CAACN,IAAI,EAAE;MACjB,IAAI,CAACO,KAAK,CAAC,eAAe,EAAEP,IAAI,CAAC,EAAE;MACnC,IAAI,CAACH,gBAAgB,CAAC,CAAC;IACzB;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}