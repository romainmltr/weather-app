{"ast":null,"code":"import WeatherService from '../services/weatherService.js';\nexport default {\n  props: {\n    city: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      data: null\n    };\n  },\n  watch: {\n    city: {\n      immediate: true,\n      handler(newCity) {\n        this.getWeatherForecast(newCity);\n      }\n    }\n  },\n  methods: {\n    async getWeatherForecast(city) {\n      try {\n        const response = await WeatherService.getForecastByCity(city, 3);\n        this.data = response.data;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    getWeatherIconUrl(code) {\n      return require(`@/assets/weather-icons/${code}.png`);\n    }\n  }\n};","map":{"version":3,"names":["WeatherService","props","city","type","String","required","data","watch","immediate","handler","newCity","getWeatherForecast","methods","response","getForecastByCity","error","console","getWeatherIconUrl","code","require"],"sources":["/Users/romain/Documents/Perso/Dev/weather-app/src/components/GetWeatherCityFutur.vue"],"sourcesContent":["<template>\n  <div>\n    <div v-if=\"data\">\n      <div class=\"carousel-container justify-center  mt-5 \">\n        <div v-for=\"forecastDay in data.forecast.forecastday\" :key=\"forecastDay.date\" class=\" flex space-between flex-col carousel-item\">\n          <h3 class=\"font-medium\">{{ forecastDay.date.slice(8) }}</h3>\n          <p class=\"mb-2\">{{ forecastDay.day.avgtemp_c }}Â°C</p>\n          <p class=\"mb-2\">{{ forecastDay.day.daily_chance_of_rain }}%</p>\n\n          <img :src=\"getWeatherIconUrl(forecastDay.day.condition.code)\" alt=\"Weather Icon\" class= \" weather-icon\">\n        </div>\n      </div>\n    </div>\n    <div v-else>\n      <p>Loading...</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport WeatherService from '../services/weatherService.js';\n\nexport default {\n  props: {\n    city: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      data: null\n    };\n  },\n  watch: {\n    city: {\n      immediate: true,\n      handler(newCity) {\n        this.getWeatherForecast(newCity);\n      }\n    }\n  },\n  methods: {\n    async getWeatherForecast(city) {\n      try {\n        const response = await WeatherService.getForecastByCity(city, 3);\n        this.data = response.data;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    getWeatherIconUrl(code) {\n      return require(`@/assets/weather-icons/${code}.png`);\n    },\n  }\n};\n</script>\n\n<style scoped>\n.carousel-container {\n  width: 100%;\n  display: flex;\n  gap: 1rem;\n\n}\n\n.carousel-item {\n  overflow-x: hidden;\n  width: 100%;\n  background-color: rgba(255, 255, 255, 0.2);\n  box-shadow: 0 8px 16px 0 rgba(31, 38, 135, 0.37);\n  border-radius: 10px;\n  border: 1px solid rgba(255, 255, 255, 0.18);\n  padding: 1rem;\n}\n\n.weather-icon {\n  width: auto;\n  height: auto;\n  max-width: 200px;\n}\n</style>\n"],"mappings":"AAoBA,OAAOA,cAAa,MAAO,+BAA+B;AAE1D,eAAe;EACbC,KAAK,EAAE;IACLC,IAAI,EAAE;MACJC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLA,IAAI,EAAE;IACR,CAAC;EACH,CAAC;EACDC,KAAK,EAAE;IACLL,IAAI,EAAE;MACJM,SAAS,EAAE,IAAI;MACfC,OAAOA,CAACC,OAAO,EAAE;QACf,IAAI,CAACC,kBAAkB,CAACD,OAAO,CAAC;MAClC;IACF;EACF,CAAC;EACDE,OAAO,EAAE;IACP,MAAMD,kBAAkBA,CAACT,IAAI,EAAE;MAC7B,IAAI;QACF,MAAMW,QAAO,GAAI,MAAMb,cAAc,CAACc,iBAAiB,CAACZ,IAAI,EAAE,CAAC,CAAC;QAChE,IAAI,CAACI,IAAG,GAAIO,QAAQ,CAACP,IAAI;MAC3B,EAAE,OAAOS,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IAEDE,iBAAiBA,CAACC,IAAI,EAAE;MACtB,OAAOC,OAAO,CAAE,0BAAyBD,IAAK,MAAK,CAAC;IACtD;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}